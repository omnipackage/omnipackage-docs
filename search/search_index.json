{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OmniPackage","text":""},{"location":"#architecture-overview","title":"Architecture overview","text":"<p>There are 2 main components:</p> <ol> <li>Agent - responsible for building packages. Can be used as stand-alone or as a build agent connected to the server</li> <li>Server aka web - responsible for web UI, package signing and repositories management. Managed version web.omnipackage.org. Can be self-hosted</li> </ol> <p>Server maintains connection with a bunch of agents and distributes the build tasks to them. Agent build packages and upload them to the server. Server signs the packages using GPG and publishes them to the repositories hosted on S3-compatible storage.</p> <p>Agent can be used as stand-alone application to build packages. Useful for debugging builds locally. You can host your own agents when using managed server. You can also configure own S3 storage for repositories. Or you can avoid server-side completely and use agent just for local builds without repositories.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>Typical steps to build any project:</p> <ol> <li><code>omnipackage init .</code> in the project's root directory. This will create <code>.omnipackage/</code> directory with necessary files</li> <li>Edit these files for your needs and make <code>omnipackage build .</code> work, i.e. produce packages for all specified in <code>.omnipackage/config.yml</code> distros</li> <li>Test these packages on all distros</li> </ol> <p>At this point you have working packages that can be used directly if you ignore signature verification errors when installing them. This happens because package managers on Linux verify signature of the package before installation. But packages built with agent locally don't have this signature.</p> <p>Go a step further:</p> <ol> <li>Create a project on web.omnipackage.org or your self-hosted server</li> <li>Trigger build manually or configure Github webhook to trigger it automatically</li> <li>Share \"Public install page\" with users - this page contains instructions how to add repository and install the package on all supported distros</li> </ol> <p>Packages in the repositories will be signed using auto-generated GPG key. You can download this key for backup on the account page. Or you can upload your own GPG key.</p>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#installing-omnipackage-agent","title":"Installing omnipackage-agent","text":"<p>Agent is responsible for building packages. You'll need it to build packages locally. There are multiple ways to install it:</p> <ol> <li>OmniPackage repositories web.omnipackage.org/oleg/omnipackage-agent</li> <li>Source code. Reasonably recent version of Ruby required. Executables located in <code>exe/</code> directory</li> </ol> <p>Test your installation <pre><code>omnipackage --check\n</code></pre></p> <p>Agent requires <code>podman</code> or <code>docker</code> as well as few other common Linux programs. It will check their availability upon start and report if anything is missing.</p>"},{"location":"getting_started/#building-example-project-locally","title":"Building example project locally","text":"<ol> <li>Clone examples repository</li> <li><code>cd examples</code></li> <li><code>omnipackage build c_makefile</code></li> </ol> <p>Now you can install the resulting package. For example, Debian 12: <pre><code>sudo dpkg -i /tmp/omnipackage-headless-build/omnipackage-example-c-debian_12/output/omnipackage-example-c_0.0.1-0_amd64.deb\n</code></pre></p>"},{"location":"getting_started/#building-and-publishing-example-project-to-repositories","title":"Building and publishing example project to repositories","text":"<ol> <li>Go to web.omnipackage.org and create a new project</li> <li>Specify sources location - path to Github repo <code>{{ examples_url }}</code> and sub-directory - <code>c_makefile</code> because the examples repo contains multiple projects in one repo and you want to build only one located in subdir</li> <li>Save, go to project page and click build now</li> <li>After the build and publishing is done you can find instructions how to instll the package on public download page</li> </ol> <p>Now your package is hosted in repositories, signed by a generated GPG key (you can upload your own key), and can be installed using native package managers.</p>"},{"location":"new_project/","title":"How to build a new project from scratch","text":"<p>WIP</p>"},{"location":"self_hosting/","title":"Self-hosting OmniPackage web","text":"<p>WIP</p>"}]}